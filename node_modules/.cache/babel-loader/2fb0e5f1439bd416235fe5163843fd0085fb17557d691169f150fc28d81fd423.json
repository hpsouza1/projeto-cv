{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport SearchComponent from './components/SearchComponent.vue';\nimport RepositoryList from './components/RepositoryList.vue';\nimport RepositoryDetails from './components/RepositoryDetails.vue';\nexport default {\n  name: 'App',\n  components: {\n    SearchComponent,\n    RepositoryList,\n    RepositoryDetails\n  },\n  data() {\n    return {\n      repositories: [],\n      // Lista de repositórios\n      selectedRepository: null,\n      // Repositório selecionado\n      darkMode: JSON.parse(localStorage.getItem('darkMode')) || false,\n      // Modo dark baseado na preferência do usuário\n      errorMessage: null // Mensagem de erro\n    };\n  },\n  methods: {\n    toggleDarkMode() {\n      this.darkMode = !this.darkMode;\n      localStorage.setItem('darkMode', JSON.stringify(this.darkMode));\n    },\n    async fetchRepositories(query) {\n      this.errorMessage = null;\n      try {\n        const response = await axios.get(`https://api.github.com/search/repositories?q=${query}`);\n\n        // Armazena apenas o primeiro resultado\n        if (response.data.items.length > 0) {\n          const repo = response.data.items[0];\n          const repository = {\n            id: repo.id,\n            name: repo.full_name,\n            description: repo.description,\n            avatar: repo.owner.avatar_url,\n            stars: repo.stargazers_count,\n            forks: repo.forks,\n            openIssues: repo.open_issues\n          };\n\n          // Salvar no localStorage\n          this.saveRepository(repository);\n\n          // Adiciona o repositório na lista\n          this.repositories.push(repository);\n        } else {\n          this.errorMessage = 'Nenhum repositório encontrado para essa busca.';\n        }\n      } catch (error) {\n        this.errorMessage = 'Erro ao buscar repositórios. Por favor, tente novamente mais tarde.';\n        console.error('Erro ao buscar repositórios:', error);\n      }\n    },\n    saveRepository(repo) {\n      let storedRepositories = JSON.parse(localStorage.getItem('repositories')) || [];\n\n      // Verifica se o repositório já está salvo\n      const repoExists = storedRepositories.some(storedRepo => storedRepo.id === repo.id);\n      if (!repoExists) {\n        storedRepositories.push(repo);\n        localStorage.setItem('repositories', JSON.stringify(storedRepositories));\n      }\n    },\n    loadRepositories() {\n      const storedRepositories = JSON.parse(localStorage.getItem('repositories'));\n      if (storedRepositories) {\n        this.repositories = storedRepositories;\n      }\n    },\n    showRepositoryDetails(repo) {\n      this.selectedRepository = repo;\n    },\n    goBack() {\n      this.selectedRepository = null;\n    }\n  },\n  mounted() {\n    this.loadRepositories(); // Carrega os repositórios do localStorage ao iniciar\n  }\n};","map":{"version":3,"names":["axios","SearchComponent","RepositoryList","RepositoryDetails","name","components","data","repositories","selectedRepository","darkMode","JSON","parse","localStorage","getItem","errorMessage","methods","toggleDarkMode","setItem","stringify","fetchRepositories","query","response","get","items","length","repo","repository","id","full_name","description","avatar","owner","avatar_url","stars","stargazers_count","forks","openIssues","open_issues","saveRepository","push","error","console","storedRepositories","repoExists","some","storedRepo","loadRepositories","showRepositoryDetails","goBack","mounted"],"sources":["src/App.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\" :class=\"{'dark-mode': darkMode, 'app-background': true}\">\r\n\r\n    <header class=\"header\">\r\n      <img :src=\"darkMode ? require('./assets/logo-dark.svg') : require('./assets/logo.svg')\" alt=\"Logo\" class=\"header-logo\" />\r\n      <button @click=\"toggleDarkMode\" class=\"header-dark-mode-button\">\r\n        {{ darkMode ? \"Desativar Modo Dark\" : \"Ativar Modo Dark\" }}\r\n      </button>\r\n      <button v-if=\"selectedRepository\" @click=\"goBack\" class=\"back-button\">Voltar</button>\r\n    </header>\r\n\r\n    <SearchComponent v-if=\"!selectedRepository\" @search=\"fetchRepositories\" :errorMessage=\"errorMessage\"/>\r\n    <RepositoryList v-if=\"!selectedRepository && repositories.length\" :repos=\"repositories\" @repository-selected=\"showRepositoryDetails\" />\r\n    <RepositoryDetails v-if=\"selectedRepository\" :repo=\"selectedRepository\" @go-back=\"goBack\" />\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport SearchComponent from './components/SearchComponent.vue';\r\nimport RepositoryList from './components/RepositoryList.vue';\r\nimport RepositoryDetails from './components/RepositoryDetails.vue';\r\n\r\nexport default {\r\n  name: 'App',\r\n  components: {\r\n    SearchComponent,\r\n    RepositoryList,\r\n    RepositoryDetails,\r\n  },\r\n  data() {\r\n    return {\r\n      repositories: [],  // Lista de repositórios\r\n      selectedRepository: null,  // Repositório selecionado\r\n      darkMode: JSON.parse(localStorage.getItem('darkMode')) || false, // Modo dark baseado na preferência do usuário\r\n      errorMessage: null,  // Mensagem de erro\r\n    };\r\n  },\r\n  methods: {\r\n    toggleDarkMode() {\r\n      this.darkMode = !this.darkMode;\r\n      localStorage.setItem('darkMode', JSON.stringify(this.darkMode)); \r\n    },\r\n    async fetchRepositories(query) {\r\n      this.errorMessage = null;\r\n\r\n      try {\r\n        const response = await axios.get(`https://api.github.com/search/repositories?q=${query}`);\r\n\r\n        // Armazena apenas o primeiro resultado\r\n        if (response.data.items.length > 0) {\r\n          const repo = response.data.items[0];\r\n          const repository = {\r\n            id: repo.id,\r\n            name: repo.full_name,\r\n            description: repo.description,\r\n            avatar: repo.owner.avatar_url,\r\n            stars: repo.stargazers_count,\r\n            forks: repo.forks,\r\n            openIssues: repo.open_issues,\r\n          };\r\n\r\n          // Salvar no localStorage\r\n          this.saveRepository(repository);\r\n\r\n          // Adiciona o repositório na lista\r\n          this.repositories.push(repository);\r\n\r\n        } else {\r\n          this.errorMessage = 'Nenhum repositório encontrado para essa busca.';\r\n        }\r\n      } catch (error) {\r\n        this.errorMessage = 'Erro ao buscar repositórios. Por favor, tente novamente mais tarde.';\r\n        console.error('Erro ao buscar repositórios:', error);\r\n      }\r\n    },\r\n    saveRepository(repo) {\r\n      let storedRepositories = JSON.parse(localStorage.getItem('repositories')) || [];\r\n\r\n      // Verifica se o repositório já está salvo\r\n      const repoExists = storedRepositories.some(storedRepo => storedRepo.id === repo.id);\r\n\r\n      if (!repoExists) {\r\n        storedRepositories.push(repo);\r\n        localStorage.setItem('repositories', JSON.stringify(storedRepositories));\r\n      }\r\n    },\r\n    loadRepositories() {\r\n      const storedRepositories = JSON.parse(localStorage.getItem('repositories'));\r\n      if (storedRepositories) {\r\n        this.repositories = storedRepositories;\r\n      }\r\n    },\r\n    showRepositoryDetails(repo) {\r\n      this.selectedRepository = repo;\r\n    },\r\n    goBack() {\r\n      this.selectedRepository = null;\r\n    },\r\n  },\r\n  mounted() {\r\n    this.loadRepositories(); // Carrega os repositórios do localStorage ao iniciar\r\n  },\r\n};\r\n</script>\r\n\r\n  \r\n<style scoped>\r\n.app-background {\r\n  min-height: 100vh;\r\n  display: flex;\r\n  justify-content: top;\r\n  align-items: flex-start;\r\n  flex-direction: column;\r\n  padding: 20px;\r\n  color: var(--title-color);\r\n  background-color: var(--background-color); /* Use a variável para a cor de fundo */\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n/* Estilos para o modo escuro */\r\n.dark-mode .app-background {\r\n  background-image: none;\r\n  background-color: var(--background-color);\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.header {\r\n  transition: background-color 0.3s;\r\n  background-color: var(--background-color);\r\n  padding: 10px;\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  width: 100%;\r\n}\r\n\r\n.header-logo {\r\n  max-width: 150px;\r\n  height: auto;\r\n}\r\n\r\n.header-title {\r\n  margin: 0;\r\n  font-size: 1.5rem;\r\n  color: var(--title-color);\r\n}\r\n\r\n.header-dark-mode-button {\r\n  transition: background-color 0.3s;\r\n  padding: 5px;\r\n  background-color: var(--button-color);\r\n  border: 1px solid var(--border-color);\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  color: var(--text-color);\r\n}\r\n\r\n.header-dark-mode-button:hover {\r\n  background-color: var(--button-hover-color);\r\n}\r\n\r\n.back-button {\r\n  padding: 5px;\r\n  background-color: var(--button-color);\r\n  border: 1px solid var(--border-color);\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  color: var(--text-color);\r\n}\r\n\r\n.back-button:hover {\r\n  background-color: var(--button-hover-color);\r\n}\r\n</style>\r\n"],"mappings":";AAmBA,OAAAA,KAAA;AACA,OAAAC,eAAA;AACA,OAAAC,cAAA;AACA,OAAAC,iBAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAJ,eAAA;IACAC,cAAA;IACAC;EACA;EACAG,KAAA;IACA;MACAC,YAAA;MAAA;MACAC,kBAAA;MAAA;MACAC,QAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MAAA;MACAC,YAAA;IACA;EACA;EACAC,OAAA;IACAC,eAAA;MACA,KAAAP,QAAA,SAAAA,QAAA;MACAG,YAAA,CAAAK,OAAA,aAAAP,IAAA,CAAAQ,SAAA,MAAAT,QAAA;IACA;IACA,MAAAU,kBAAAC,KAAA;MACA,KAAAN,YAAA;MAEA;QACA,MAAAO,QAAA,SAAArB,KAAA,CAAAsB,GAAA,iDAAAF,KAAA;;QAEA;QACA,IAAAC,QAAA,CAAAf,IAAA,CAAAiB,KAAA,CAAAC,MAAA;UACA,MAAAC,IAAA,GAAAJ,QAAA,CAAAf,IAAA,CAAAiB,KAAA;UACA,MAAAG,UAAA;YACAC,EAAA,EAAAF,IAAA,CAAAE,EAAA;YACAvB,IAAA,EAAAqB,IAAA,CAAAG,SAAA;YACAC,WAAA,EAAAJ,IAAA,CAAAI,WAAA;YACAC,MAAA,EAAAL,IAAA,CAAAM,KAAA,CAAAC,UAAA;YACAC,KAAA,EAAAR,IAAA,CAAAS,gBAAA;YACAC,KAAA,EAAAV,IAAA,CAAAU,KAAA;YACAC,UAAA,EAAAX,IAAA,CAAAY;UACA;;UAEA;UACA,KAAAC,cAAA,CAAAZ,UAAA;;UAEA;UACA,KAAAnB,YAAA,CAAAgC,IAAA,CAAAb,UAAA;QAEA;UACA,KAAAZ,YAAA;QACA;MACA,SAAA0B,KAAA;QACA,KAAA1B,YAAA;QACA2B,OAAA,CAAAD,KAAA,iCAAAA,KAAA;MACA;IACA;IACAF,eAAAb,IAAA;MACA,IAAAiB,kBAAA,GAAAhC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;;MAEA;MACA,MAAA8B,UAAA,GAAAD,kBAAA,CAAAE,IAAA,CAAAC,UAAA,IAAAA,UAAA,CAAAlB,EAAA,KAAAF,IAAA,CAAAE,EAAA;MAEA,KAAAgB,UAAA;QACAD,kBAAA,CAAAH,IAAA,CAAAd,IAAA;QACAb,YAAA,CAAAK,OAAA,iBAAAP,IAAA,CAAAQ,SAAA,CAAAwB,kBAAA;MACA;IACA;IACAI,iBAAA;MACA,MAAAJ,kBAAA,GAAAhC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACA,IAAA6B,kBAAA;QACA,KAAAnC,YAAA,GAAAmC,kBAAA;MACA;IACA;IACAK,sBAAAtB,IAAA;MACA,KAAAjB,kBAAA,GAAAiB,IAAA;IACA;IACAuB,OAAA;MACA,KAAAxC,kBAAA;IACA;EACA;EACAyC,QAAA;IACA,KAAAH,gBAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}