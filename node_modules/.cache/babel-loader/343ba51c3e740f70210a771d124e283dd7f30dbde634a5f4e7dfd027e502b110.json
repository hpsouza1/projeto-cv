{"ast":null,"code":"import axios from 'axios';\nimport SearchComponent from './components/SearchComponent.vue';\nimport RepositoryList from './components/RepositoryList.vue';\nimport RepositoryDetails from './components/RepositoryDetails.vue';\nimport IssueList from './components/Issue.l';\nexport default {\n  name: 'App',\n  components: {\n    SearchComponent,\n    RepositoryList,\n    RepositoryDetails\n  },\n  data() {\n    return {\n      repositories: [],\n      selectedRepository: null,\n      darkMode: false\n    };\n  },\n  methods: {\n    toggleDarkMode() {\n      this.darkMode = !this.darkMode;\n    },\n    async fetchRepositories(query) {\n      try {\n        const response = await axios.get(`https://api.github.com/search/repositories?q=${query}`);\n        this.repositories = response.data.items.map(repo => ({\n          id: repo.id,\n          name: repo.full_name,\n          description: repo.description,\n          avatar: repo.owner.avatar_url,\n          stars: repo.stargazers_count,\n          forks: repo.forks,\n          openIssues: repo.open_issues\n        }));\n      } catch (error) {\n        console.error('Erro ao buscar repositórios:', error);\n      }\n    },\n    showRepositoryDetails(repo) {\n      this.selectedRepository = repo;\n    },\n    goBack() {\n      this.selectedRepository = null;\n    }\n  }\n};","map":{"version":3,"names":["axios","SearchComponent","RepositoryList","RepositoryDetails","IssueList","name","components","data","repositories","selectedRepository","darkMode","methods","toggleDarkMode","fetchRepositories","query","response","get","items","map","repo","id","full_name","description","avatar","owner","avatar_url","stars","stargazers_count","forks","openIssues","open_issues","error","console","showRepositoryDetails","goBack"],"sources":["src/components/RepositoryDetails.vue"],"sourcesContent":["<template>\r\n    <div id=\"app\" :class=\"{'dark-mode': darkMode, 'app-background': true}\">\r\n      <header class=\"header\">\r\n        <img :src=\"darkMode ? require('./assets/logo-dark.svg') : require('./assets/logo.svg')\" alt=\"Logo\" class=\"header-logo\" />\r\n        <button @click=\"toggleDarkMode\" class=\"header-dark-mode-button\">\r\n          {{ darkMode ? \"Desativar Modo Dark\" : \"Ativar Modo Dark\" }}\r\n        </button>\r\n        <button v-if=\"selectedRepository\" @click=\"goBack\" class=\"back-button\">Voltar</button>\r\n      </header>\r\n  \r\n      <SearchComponent v-if=\"!selectedRepository\" @search=\"fetchRepositories\" />\r\n      <RepositoryList v-if=\"!selectedRepository && repositories.length\" :repos=\"repositories\" @repository-selected=\"showRepositoryDetails\" />\r\n      <RepositoryDetails v-if=\"selectedRepository\" :repo=\"selectedRepository\" />\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  import SearchComponent from './components/SearchComponent.vue';\r\n  import RepositoryList from './components/RepositoryList.vue';\r\n  import RepositoryDetails from './components/RepositoryDetails.vue';\r\n  import IssueList from './components/Issue.l';\r\n  \r\n  export default {\r\n    name: 'App',\r\n    components: {\r\n      SearchComponent,\r\n      RepositoryList,\r\n      RepositoryDetails,\r\n    },\r\n    data() {\r\n      return {\r\n        repositories: [],\r\n        selectedRepository: null,\r\n        darkMode: false,\r\n      };\r\n    },\r\n    methods: {\r\n      toggleDarkMode() {\r\n        this.darkMode = !this.darkMode;\r\n      },\r\n      async fetchRepositories(query) {\r\n        try {\r\n          const response = await axios.get(`https://api.github.com/search/repositories?q=${query}`);\r\n          this.repositories = response.data.items.map(repo => ({\r\n            id: repo.id,\r\n            name: repo.full_name,\r\n            description: repo.description,\r\n            avatar: repo.owner.avatar_url,\r\n            stars: repo.stargazers_count,\r\n            forks: repo.forks,\r\n            openIssues: repo.open_issues,\r\n          }));\r\n        } catch (error) {\r\n          console.error('Erro ao buscar repositórios:', error);\r\n        }\r\n      },\r\n      showRepositoryDetails(repo) {\r\n        this.selectedRepository = repo;\r\n      },\r\n      goBack() {\r\n        this.selectedRepository = null;\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Os estilos permanecem os mesmos, adicione estilos para o botão de voltar se necessário */\r\n  </style>\r\n  "],"mappings":"AAiBA,OAAAA,KAAA;AACA,OAAAC,eAAA;AACA,OAAAC,cAAA;AACA,OAAAC,iBAAA;AACA,OAAAC,SAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAL,eAAA;IACAC,cAAA;IACAC;EACA;EACAI,KAAA;IACA;MACAC,YAAA;MACAC,kBAAA;MACAC,QAAA;IACA;EACA;EACAC,OAAA;IACAC,eAAA;MACA,KAAAF,QAAA,SAAAA,QAAA;IACA;IACA,MAAAG,kBAAAC,KAAA;MACA;QACA,MAAAC,QAAA,SAAAf,KAAA,CAAAgB,GAAA,iDAAAF,KAAA;QACA,KAAAN,YAAA,GAAAO,QAAA,CAAAR,IAAA,CAAAU,KAAA,CAAAC,GAAA,CAAAC,IAAA;UACAC,EAAA,EAAAD,IAAA,CAAAC,EAAA;UACAf,IAAA,EAAAc,IAAA,CAAAE,SAAA;UACAC,WAAA,EAAAH,IAAA,CAAAG,WAAA;UACAC,MAAA,EAAAJ,IAAA,CAAAK,KAAA,CAAAC,UAAA;UACAC,KAAA,EAAAP,IAAA,CAAAQ,gBAAA;UACAC,KAAA,EAAAT,IAAA,CAAAS,KAAA;UACAC,UAAA,EAAAV,IAAA,CAAAW;QACA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,iCAAAA,KAAA;MACA;IACA;IACAE,sBAAAd,IAAA;MACA,KAAAV,kBAAA,GAAAU,IAAA;IACA;IACAe,OAAA;MACA,KAAAzB,kBAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}