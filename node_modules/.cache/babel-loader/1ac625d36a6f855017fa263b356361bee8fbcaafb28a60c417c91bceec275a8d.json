{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport SearchComponent from \"@/components/SearchComponent.vue\";\nimport RepositoryList from \"@/components/RepositoryList.vue\";\nimport axios from \"axios\";\nexport default {\n  name: \"HomeView\",\n  components: {\n    SearchComponent,\n    RepositoryList\n  },\n  data() {\n    return {\n      repositories: [],\n      selectedRepository: null,\n      errorMessage: null\n    };\n  },\n  methods: {\n    async fetchRepositories(query) {\n      this.errorMessage = null;\n      try {\n        const response = await axios.get(`https://api.github.com/search/repositories?q=${query}`);\n        if (response.data.items.length > 0) {\n          const repo = response.data.items[0];\n          const repository = {\n            id: repo.id,\n            name: repo.full_name,\n            description: repo.description,\n            avatar: repo.owner.avatar_url,\n            stars: repo.stargazers_count,\n            forks: repo.forks,\n            openIssues: repo.open_issues\n          };\n          this.repositories.push(repository);\n        } else {\n          this.errorMessage = \"Nenhum reposit贸rio encontrado para essa busca.\";\n        }\n      } catch (error) {\n        this.errorMessage = \"Erro ao buscar reposit贸rios. Por favor, tente novamente mais tarde.\";\n      }\n    },\n    showRepositoryDetails(repo) {\n      this.$router.push({\n        name: \"repositoryDetails\",\n        params: {\n          id: repo.id\n        }\n      });\n    },\n    mounted() {\n      const storedRepositories = JSON.parse(localStorage.getItem(\"repositories\"));\n      if (storedRepositories) {\n        this.repositories = storedRepositories;\n      }\n    }\n  }\n};","map":{"version":3,"names":["SearchComponent","RepositoryList","axios","name","components","data","repositories","selectedRepository","errorMessage","methods","fetchRepositories","query","response","get","items","length","repo","repository","id","full_name","description","avatar","owner","avatar_url","stars","stargazers_count","forks","openIssues","open_issues","push","error","showRepositoryDetails","$router","params","mounted","storedRepositories","JSON","parse","localStorage","getItem"],"sources":["src/views/HomeView.vue"],"sourcesContent":["<!-- src/views/HomeView.vue -->\r\n<template>\r\n  <div>\r\n    <SearchComponent @search=\"fetchRepositories\" :errorMessage=\"errorMessage\" />\r\n    <RepositoryList\r\n      v-if=\"repositories.length && !selectedRepository\"\r\n      :repos=\"repositories\"\r\n      @repository-selected=\"showRepositoryDetails\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SearchComponent from \"@/components/SearchComponent.vue\";\r\nimport RepositoryList from \"@/components/RepositoryList.vue\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"HomeView\",\r\n  components: {\r\n    SearchComponent,\r\n    RepositoryList,\r\n  },\r\n  data() {\r\n    return {\r\n      repositories: [],\r\n      selectedRepository: null,\r\n      errorMessage: null,\r\n    };\r\n  },\r\n  methods: {\r\n    async fetchRepositories(query) {\r\n      this.errorMessage = null;\r\n      try {\r\n        const response = await axios.get(\r\n          `https://api.github.com/search/repositories?q=${query}`\r\n        );\r\n        if (response.data.items.length > 0) {\r\n          const repo = response.data.items[0];\r\n          const repository = {\r\n            id: repo.id,\r\n            name: repo.full_name,\r\n            description: repo.description,\r\n            avatar: repo.owner.avatar_url,\r\n            stars: repo.stargazers_count,\r\n            forks: repo.forks,\r\n            openIssues: repo.open_issues,\r\n          };\r\n          this.repositories.push(repository);\r\n        } else {\r\n          this.errorMessage = \"Nenhum reposit贸rio encontrado para essa busca.\";\r\n        }\r\n      } catch (error) {\r\n        this.errorMessage =\r\n          \"Erro ao buscar reposit贸rios. Por favor, tente novamente mais tarde.\";\r\n      }\r\n    },\r\n    showRepositoryDetails(repo) {\r\n      this.$router.push({ name: \"repositoryDetails\", params: { id: repo.id } });\r\n    },\r\n    mounted() {\r\n      const storedRepositories = JSON.parse(\r\n        localStorage.getItem(\"repositories\")\r\n      );\r\n      if (storedRepositories) {\r\n        this.repositories = storedRepositories;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";AAaA,OAAAA,eAAA;AACA,OAAAC,cAAA;AACA,OAAAC,KAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAJ,eAAA;IACAC;EACA;EACAI,KAAA;IACA;MACAC,YAAA;MACAC,kBAAA;MACAC,YAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,kBAAAC,KAAA;MACA,KAAAH,YAAA;MACA;QACA,MAAAI,QAAA,SAAAV,KAAA,CAAAW,GAAA,CACA,gDAAAF,KAAA,EACA;QACA,IAAAC,QAAA,CAAAP,IAAA,CAAAS,KAAA,CAAAC,MAAA;UACA,MAAAC,IAAA,GAAAJ,QAAA,CAAAP,IAAA,CAAAS,KAAA;UACA,MAAAG,UAAA;YACAC,EAAA,EAAAF,IAAA,CAAAE,EAAA;YACAf,IAAA,EAAAa,IAAA,CAAAG,SAAA;YACAC,WAAA,EAAAJ,IAAA,CAAAI,WAAA;YACAC,MAAA,EAAAL,IAAA,CAAAM,KAAA,CAAAC,UAAA;YACAC,KAAA,EAAAR,IAAA,CAAAS,gBAAA;YACAC,KAAA,EAAAV,IAAA,CAAAU,KAAA;YACAC,UAAA,EAAAX,IAAA,CAAAY;UACA;UACA,KAAAtB,YAAA,CAAAuB,IAAA,CAAAZ,UAAA;QACA;UACA,KAAAT,YAAA;QACA;MACA,SAAAsB,KAAA;QACA,KAAAtB,YAAA,GACA;MACA;IACA;IACAuB,sBAAAf,IAAA;MACA,KAAAgB,OAAA,CAAAH,IAAA;QAAA1B,IAAA;QAAA8B,MAAA;UAAAf,EAAA,EAAAF,IAAA,CAAAE;QAAA;MAAA;IACA;IACAgB,QAAA;MACA,MAAAC,kBAAA,GAAAC,IAAA,CAAAC,KAAA,CACAC,YAAA,CAAAC,OAAA,gBACA;MACA,IAAAJ,kBAAA;QACA,KAAA7B,YAAA,GAAA6B,kBAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}